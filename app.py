from flask import Flask, session, request, redirect, url_for, abort
from dotenv import load_dotenv
from flask_migrate import Migrate

from extensions import db, login_manager, babel
from config import Config


# ---------- CLI-команды ----------
def register_cli(app):
    # оба имени команды будут работать
    @app.cli.command("seed-tests")
    @app.cli.command("seed_tests")
    def seed_tests():
        """Создаёт каталог тестов + по 3 демонстрационных вопроса (если их ещё нет)."""
        from models import Test, TestQuestion, TestOption  # импорт внутри команды

        data = [
            # slug,            title,                           short,                                               min, img,                          confidential_for_student
            ("holland",   "Опросник Холланда",                  "Исследуй тип личности и получи рекомендации по профессиям.", 6,  "img/tests/holland.png",   False),
            ("klimov",    "ДДО (Климов)",                       "Тип профессий по классификации Е. А. Климова.",               5,  "img/tests/klimov.png",    False),
            ("kos2",      "КОС-2",                              "Коммуникативные и организаторские склонности.",              5,  "img/tests/kos2.png",      False),
            ("interests", "Карта интересов",                    "Предпочтительные виды деятельности.",                         4,  "img/tests/interests.png", False),
            ("thinking",  "Тип мышления",                       "Какой тип мышления у тебя преобладает.",                      5,  "img/tests/thinking.png",  False),
            ("child_type","Тип личности ребёнка",               "Особенности школьника.",                                     5,  "img/tests/child.png",     False),
            ("bennett",   "Тест Беннета",                       "Пространственное воображение и технические способности.",     6,  "img/tests/bennett.png",   False),
            ("mbti",      "MBTI (укороченная версия)",          "Склонности по типологии Майерс — Бриггс.",                    7,  "img/tests/mbti.png",      False),
            ("cdi",       "Опросник детской депрессии (CDI)",   "Определение уровня депрессивных симптомов у 7–17 лет.",       7,  "img/tests/cdi.png",       True),
        ]

        created = 0
        for slug, title, short, mins, img, secret in data:
            t = Test.query.filter_by(slug=slug).first()
            if not t:
                t = Test(
                    slug=slug,
                    title=title,
                    short_desc=short,
                    long_desc=short,          # подробный текст можно дозалить командой backfill-descriptions
                    duration_min=mins,
                    image=img,
                    confidential_student=secret,
                )
                db.session.add(t)
                db.session.flush()

                # по 3 демо-вопроса (одиночный выбор)
                for i in range(1, 4):
                    q = TestQuestion(test_id=t.id, order=i, text=f"{title}: вопрос {i}", qtype="single")
                    db.session.add(q)
                    db.session.flush()
                    for j, txt in enumerate(["Совсем не про меня", "Похоже", "Очень про меня"], start=1):
                        db.session.add(TestOption(question_id=q.id, order=j, text=txt, value=str(j)))
                created += 1

        db.session.commit()
        print(f"Готово. Создано тестов: {created}")

    @app.cli.command("import-klimov")
    def import_klimov():
        """
        Импорт Дифференциально-диагностического опросника Климова (ДДО).
        CSV: instance/klimov_ddo.csv  (UTF-8; разделитель ; или ,)
        Колонки: order,qtext,a_text,a_code,b_text,b_code,weight(необяз.)
        Коды шкал: H (Ч-Ч), T (Ч-Т), N (Ч-Пр), S (Ч-Зн), A (Ч-ХО)
        Значение варианта = "<КОД>=<вес>" (например, "H=1"), вес по умолчанию 1.
        """
        import csv
        from pathlib import Path
        from models import Test, TestQuestion, TestOption

        # 1) гарантируем наличие теста
        test = Test.query.filter_by(slug="klimov").first()
        if not test:
            test = Test(
                slug="klimov",
                title="ДДО (Климов)",
                short_desc="Типы профессий по Климову: Ч-Ч, Ч-Т, Ч-Пр, Ч-Зн, Ч-ХО.",
                long_desc=("Опросник помогает понять, с какими объектами труда вам комфортнее: "
                           "человек-человек, человек-техника, человек-природа, "
                           "человек-знаковая система или человек-художественный образ."),
                duration_min=5,
                image="img/tests/klimov.png",
                confidential_student=False,
            )
            db.session.add(test)
            db.session.flush()

        # 2) очищаем прежние вопросы/опции (если перезаливаем)
        for q in TestQuestion.query.filter_by(test_id=test.id).all():
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # 3) читаем CSV, если он есть; иначе берём встроенный набор
        csv_path = Path(app.instance_path) / "klimov_ddo.csv"

        fallback_rows = [
            # order, вопрос, A-текст, A-код, B-текст, B-код
            (1,  "Объяснять материал однокласснику",                       "Помогать и общаться",              "H", "Настраивать компьютер/принтер",                 "T"),
            (2,  "Ухаживать за комнатными растениями",                      "Полив, уход, пересадка",           "N", "Вести аккуратные записи, таблицы",              "S"),
            (3,  "Сочинять небольшие рассказы или посты",                   "Творчески выражаться",             "A", "Настраивать бытовую технику",                   "T"),
            (4,  "Проводить экскурсии/встречи для гостей",                  "Коммуникация с людьми",            "H", "Кодировать данные, заполнять формы",            "S"),
            (5,  "Работать с микроскопом, инструментами",                   "Технические приборы",              "T", "Ухаживать за животными/аквариумом",             "N"),
            (6,  "Оформлять стенд/презентацию красиво",                     "Дизайн и композиция",              "A", "Решать логические задачи по шаблону",           "S"),
            (7,  "Проводить тренинги/игры для группы",                      "Вести мероприятие",                "H", "Собирать и разбирать устройства",               "T"),
            (8,  "Наблюдать за природными явлениями",                       "Эксперименты с живой природой",    "N", "Разбирать схемы/диаграммы",                     "S"),
            (9,  "Подбирать музыку/иллюстрации к ролику",                    "Эстетика, художественный вкус",    "A", "Сверять отчёты с образцом",                     "S"),
            (10, "Организовывать волонтёрские акции",                        "Работа с людьми",                  "H", "Ремонтировать мелкую технику",                   "T"),
            (11, "Выращивать рассаду/участвовать в школьном саду",          "Уход за растениями",               "N", "Составлять каталоги/реестры",                   "S"),
            (12, "Придумывать оформление праздника",                         "Сценография/декор",                "A", "Собирать конструктор/робота по инструкции",     "T"),
            (13, "Проводить интервью/опросы",                                "Коммуникация и эмпатия",           "H", "Писать программы/скрипты",                      "T"),
            (14, "Наблюдать за животными, фиксировать поведение",           "Биология/экология",                "N", "Верстать таблицы/шаблоны документов",           "S"),
            (15, "Снимать фото/видео и монтировать",                         "Творчество и визуал",              "A", "Проверять данные на ошибки",                    "S"),
            (16, "Наставничество для младших",                               "Общение и поддержка",              "H", "Пайка/сборка простых схем",                      "T"),
            (17, "Эксперименты с почвой/семенами/условиями роста",          "Природные процессы",               "N", "Работа с кодами, шифрами, символами",           "S"),
            (18, "Разрабатывать афиши/обложки",                              "Графический дизайн",               "A", "Использовать измерительные приборы",            "T"),
            (19, "Медиатор: решать споры/договариваться",                    "Социальные навыки",                "H", "Настройка сетей/приложений",                    "T"),
            (20, "Наблюдать сезонные изменения в природе",                   "Полевые заметки",                  "N", "Анализировать диаграммы/карты/чертежи",         "S"),
        ]

        rows = []
        if csv_path.exists():
            with csv_path.open("r", encoding="utf-8") as f:
                sample = f.read(4096); delim = ";" if sample.count(";") > sample.count(",") else ","
                f.seek(0)
                reader = csv.DictReader(f, delimiter=delim)
                for r in reader:
                    rows.append((
                        int(r.get("order") or 0),
                        (r.get("qtext") or "").strip(),
                        (r.get("a_text") or "").strip(),
                        (r.get("a_code") or "").strip().upper(),
                        (r.get("b_text") or "").strip(),
                        (r.get("b_code") or "").strip().upper(),
                        int(r.get("weight") or 1),
                    ))
        else:
            # если CSV нет — берём fallback
            rows = [(o, q, a, ac, b, bc, 1) for (o, q, a, ac, b, bc) in fallback_rows]

        # валидация и заливка
        ALLOWED = {"H", "T", "N", "S", "A"}
        created = 0
        for order, qtext, a_text, a_code, b_text, b_code, w in rows:
            if not order or not qtext or not a_text or not b_text:
                continue
            if a_code not in ALLOWED or b_code not in ALLOWED:
                raise ValueError(f"Неверный код в строке {order}: {a_code}/{b_code}")

            q = TestQuestion(test_id=test.id, order=order, text=qtext, qtype="single")
            db.session.add(q); db.session.flush()

            db.session.add(TestOption(question_id=q.id, order=1, text=a_text, value=f"{a_code}={w}"))
            db.session.add(TestOption(question_id=q.id, order=2, text=b_text, value=f"{b_code}={w}"))
            created += 1

        db.session.commit()
        print(f"ДДО Климова импортирован. Вопросов: {created}")

    @app.cli.command("import-kos2")
    def import_kos2():
        """
        Импорт КОС-2 (40 утверждений) — COMM / ORG.
        Ответы: 'Да' (балл по шкале), 'Нет' (0).
        """
        from models import Test, TestQuestion, TestOption

        # 40 утверждений: (текст, шкала)
        ITEMS = [
            # COMM — коммуникативные склонности
            ("Легко завожу разговор с незнакомыми людьми.", "COMM"),
            ("Получаю удовольствие от групповых обсуждений.", "COMM"),
            ("Умею убеждать одноклассников принять мою точку зрения.", "COMM"),
            ("Не стесняюсь выступать перед классом.", "COMM"),
            ("Быстро нахожу общий язык с людьми разного возраста.", "COMM"),
            ("Люблю помогать другим объяснением сложных тем.", "COMM"),
            ("Часто беру на себя роль модератора в спорах.", "COMM"),
            ("Легко формулирую свои мысли словами.", "COMM"),
            ("Замечаю непонимание и могу перефразировать объяснение.", "COMM"),
            ("Получаю энергию от общения.", "COMM"),
            ("Мне интересно знакомиться с новыми людьми.", "COMM"),
            ("Умею задавать уточняющие вопросы.", "COMM"),
            ("Стараюсь активно слушать и поддерживать диалог.", "COMM"),
            ("Часто выступаю представителем команды на защитах.", "COMM"),
            ("Не боюсь задавать вопросы на публике.", "COMM"),
            ("Люблю вести переписку и чаты проекта.", "COMM"),
            ("Могу объяснить материал несколькими способами.", "COMM"),
            ("Знаю, как сгладить конфликт разговором.", "COMM"),
            ("Не теряюсь в незнакомой компании.", "COMM"),
            ("Считаю, что коммуникация — моя сильная сторона.", "COMM"),

            # ORG — организаторские склонности
            ("Нравится распределять задачи в команде.", "ORG"),
            ("Планирую работу по шагам и срокам.", "ORG"),
            ("Беру ответственность за общий результат.", "ORG"),
            ("Замечаю риски и предлагаю резервные планы.", "ORG"),
            ("Слежу, чтобы встреча шла по повестке.", "ORG"),
            ("Умею делегировать и контролировать исполнение.", "ORG"),
            ("Навожу порядок в файлах, документах и заметках.", "ORG"),
            ("Заранее готовлю ресурсы и инструменты для проекта.", "ORG"),
            ("Довожу начатое дело до конца.", "ORG"),
            ("Веду список задач и расставляю приоритеты.", "ORG"),
            ("Продумываю роли участников перед стартом.", "ORG"),
            ("Помогаю команде держать дедлайны.", "ORG"),
            ("Люблю организовывать мероприятия и встречи.", "ORG"),
            ("Могу распределить бюджет/ресурсы проекта.", "ORG"),
            ("Вижу зависимость задач и выстраиваю последовательность.", "ORG"),
            ("Фиксирую договорённости письменно.", "ORG"),
            ("Отслеживаю прогресс по чек-листам/метрикам.", "ORG"),
            ("Подсказываю, как улучшить рабочий процесс.", "ORG"),
            ("Спокойно принимаю решения в срок.", "ORG"),
            ("Могу координировать сразу нескольких людей.", "ORG"),
        ]

        # 1) Найдём/создадим сам тест
        test = Test.query.filter_by(slug="kos2").first()
        if not test:
            test = Test(
                slug="kos2",
                title="КОС-2",
                short_desc="Коммуникативные и организаторские склонности.",
                long_desc="Две шкалы: COMM (коммуникация), ORG (организация). Ответ: «Да/Нет».",
                duration_min=5,
                image="img/tests/kos2.png",
                confidential_student=False,
            )
            db.session.add(test)
            db.session.flush()

        # 2) Сотрём старые вопросы/опции
        old_qs = TestQuestion.query.filter_by(test_id=test.id).all()
        for q in old_qs:
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # 3) Добавим новые
        for i, (text, scale) in enumerate(ITEMS, start=1):
            q = TestQuestion(test_id=test.id, order=i, text=text, qtype="single")
            db.session.add(q)
            db.session.flush()

            # 'Да' — +1 к нужной шкале; 'Нет' — 0 (пустое значение)
            db.session.add(TestOption(question_id=q.id, order=1, text="Да",  value=f"{scale}=1"))
            db.session.add(TestOption(question_id=q.id, order=2, text="Нет", value=""))

        db.session.commit()
        print(f"КОС-2 импортирован: вопросов — {len(ITEMS)}")

    @app.cli.command("import-interests")
    def import_interests():
        """
        Импорт теста «Карта интересов».
        8 доменов (по 6 утверждений): SCI, TECH, MATH, HUM, ART, SOC, BUS, MAN.
        Ответы: «Да» (CODE=1), «Нет» (0). Итог — суммы по кодам.
        """
        from models import Test, TestQuestion, TestOption

        ITEMS = [
            # SCI — естественные науки
            ("Мне нравится проводить простые химические опыты.", "SCI"),
            ("С интересом читаю о биологии, организме человека, экологии.", "SCI"),
            ("Люблю наблюдать природные явления и делать заметки/наблюдения.", "SCI"),
            ("С удовольствием изучаю, почему работают физические законы.", "SCI"),
            ("Мне нравятся лабораторные работы и эксперименты.", "SCI"),
            ("Люблю искать научные объяснения повседневных вещей.", "SCI"),

            # TECH — техника/инженерия
            ("Мне интересно разбирать устройства и понимать, как они устроены.", "TECH"),
            ("Нравится пайка, Arduino/робототехника, сборка схем.", "TECH"),
            ("Хочу работать с 3D-печатью, станками, инструментами.", "TECH"),
            ("Люблю собирать/апгрейдить компьютеры, настраивать железо.", "TECH"),
            ("Интересно настраивать приложения, плагины, писать утилиты.", "TECH"),
            ("Нравится делать чертежи, схемы, простые инженерные модели.", "TECH"),

            # MATH — математика/аналитика/программирование
            ("С удовольствием решаю олимпиадные/логические задачи.", "MATH"),
            ("Интересуюсь статистикой и анализом данных.", "MATH"),
            ("Люблю программировать алгоритмы и разбираться в их работе.", "MATH"),
            ("Интересна финансовая математика: проценты, инвестиции, риски.", "MATH"),
            ("Нравится моделирование в Excel/Python (таблицы, графики).", "MATH"),
            ("Получаю удовольствие от строгих доказательств и формул.", "MATH"),

            # HUM — гуманитарные науки/языки/право
            ("Люблю читать исторические книги и разбираться в эпохах.", "HUM"),
            ("Интересуюсь языками и грамматикой, люблю разбирать тексты.", "HUM"),
            ("Нравится переводить и подбирать точные формулировки.", "HUM"),
            ("Люблю дебаты, эссе и аргументированное выражение мыслей.", "HUM"),
            ("Интересуюсь правом, обществом и устройством государства.", "HUM"),
            ("Нравится философия и обсуждение идей/концепций.", "HUM"),

            # ART — искусство/дизайн/медиа
            ("Люблю рисовать, иллюстрировать, заниматься живописью.", "ART"),
            ("Интересен дизайн интерфейсов/плакатов/айдентики.", "ART"),
            ("Нравится снимать фото/видео и делать монтаж.", "ART"),
            ("Хочу писать музыку/звук, работать со студийными программами.", "ART"),
            ("Люблю участвовать в театральных постановках/сценариях.", "ART"),
            ("Интересна архитектура, эскизы, визуальные концепции.", "ART"),

            # SOC — социальное/помогающие профессии
            ("Мне нравится волонтёрство и помощь людям.", "SOC"),
            ("С интересом наставляю младших, объясняю учебный материал.", "SOC"),
            ("Хочу участвовать в образовательных и социальных проектах.", "SOC"),
            ("Интересуюсь психологией общения и поддержкой людей.", "SOC"),
            ("Нравится организовывать события для других.", "SOC"),
            ("Умею мирно разруливать конфликты и договариваться.", "SOC"),

            # BUS — бизнес/предпринимательство/маркетинг
            ("Люблю придумывать бизнес-идеи и оценивать их жизнеспособность.", "BUS"),
            ("Интересны продажи, переговоры, работа с клиентами.", "BUS"),
            ("Нравится маркетинг/SMM: позиционирование, контент, промо.", "BUS"),
            ("С интересом веду школьные проекты с финансами и поставками.", "BUS"),
            ("Люблю анализировать рынок и конкурентов.", "BUS"),
            ("Интересно считать прибыль/себестоимость и строить бюджет.", "BUS"),

            # MAN — менеджмент/управление проектами
            ("Нравится планировать проект по этапам и срокам.", "MAN"),
            ("Могу распределять роли и задачи в команде.", "MAN"),
            ("Спокойно беру ответственность за общий результат.", "MAN"),
            ("Люблю проводить встречи, фиксировать договорённости.", "MAN"),
            ("Слежу за дедлайнами и ресурсами проекта.", "MAN"),
            ("Нравится оптимизировать процесс: чек-листы, регламенты.", "MAN"),
        ]

        # 1) найти/создать сам тест
        test = Test.query.filter_by(slug="interests").first()
        if not test:
            test = Test(
                slug="interests",
                title="Карта интересов",
                short_desc="Предпочтительные сферы занятий и активности.",
                long_desc="Оценка интересов по 8 направлениям: SCI, TECH, MATH, HUM, ART, SOC, BUS, MAN.",
                duration_min=6,
                image="img/tests/interests.png",
                confidential_student=False,
            )
            db.session.add(test)
            db.session.flush()

        # 2) удалить старые вопросы/опции, если есть
        old_qs = TestQuestion.query.filter_by(test_id=test.id).all()
        for q in old_qs:
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # 3) добавить новые
        for i, (text, code) in enumerate(ITEMS, start=1):
            q = TestQuestion(test_id=test.id, order=i, text=text, qtype="single")
            db.session.add(q)
            db.session.flush()
            # 'Да' — +1 к домену; 'Нет' — 0
            db.session.add(TestOption(question_id=q.id, order=1, text="Да",  value=f"{code}=1"))
            db.session.add(TestOption(question_id=q.id, order=2, text="Нет", value=""))

        db.session.commit()
        print(f"Импорт «Карта интересов» завершён: вопросов — {len(ITEMS)}")

    @app.cli.command("import-thinking")
    def import_thinking():
        """
        Импорт теста «Тип мышления (по Резапкину)».
        3 шкалы: ACT (наглядно-действенное), IMG (наглядно-образное), LOG (словесно-логическое).
        Ответы: «Да» (CODE=1) / «Нет» (0).
        """
        from models import Test, TestQuestion, TestOption

        ITEMS = [
            # ---------- ACT: наглядно-действенное ----------
            ("Мне проще разобраться, когда можно сразу попробовать своими руками.", "ACT"),
            ("Люблю собирать и разбирать предметы, чтобы понять их устройство.", "ACT"),
            ("Инструкции читаю по ходу дела — лучше начать и разбираться в процессе.", "ACT"),
            ("Нравится чинить/настраивать вещи, инструменты, технику.", "ACT"),
            ("Лучше один раз сделать самому, чем десять раз услышать объяснение.", "ACT"),
            ("Быстро перехожу от идеи к действию.", "ACT"),
            ("Предпочитаю задания с конкретным результатом «до/после».", "ACT"),
            ("Легче учусь на практике, чем по теории.", "ACT"),
            ("Нравится работать с инструментами/механизмами.", "ACT"),
            ("В задачах люблю искать рабочие лайфхаки и обходные решения.", "ACT"),
            ("Передаю информацию другим через показ: «смотри, как делаю я».", "ACT"),
            ("В проекте тянусь к роли исполнителя/мастера, а не аналитика.", "ACT"),

            # ---------- IMG: наглядно-образное ----------
            ("Легко представляю в голове образы, схемы, карты.", "IMG"),
            ("Люблю диаграммы, инфографику и визуальные конспекты.", "IMG"),
            ("Часто мыслю метафорами, картинками, сравнениями.", "IMG"),
            ("Легче запоминаю материал по рисункам/таблицам, чем по сплошному тексту.", "IMG"),
            ("Нравится рисовать схему перед решением задачи.", "IMG"),
            ("При чтении представляю происходящее как фильм/сцены.", "IMG"),
            ("Люблю ментальные карты и стикеры разных цветов.", "IMG"),
            ("Интересна геометрия форм, симметрия, композиция.", "IMG"),
            ("Быстрее понимаю план помещения по чертежу, чем по описанию словами.", "IMG"),
            ("Предпочитаю визуальные инструкции (скриншоты/иконки).", "IMG"),
            ("Часто «прокручиваю» в голове, как будет выглядеть результат.", "IMG"),
            ("Нравится оформлять презентации и визуально структурировать материал.", "IMG"),

            # ---------- LOG: словесно-логическое ----------
            ("Нравится формулировать определения и точные понятия.", "LOG"),
            ("Люблю доказывать утверждения шаг за шагом.", "LOG"),
            ("Предпочитаю сначала прочитать инструкцию, потом действовать.", "LOG"),
            ("Интересны логические задачи, ребусы, формальные правила.", "LOG"),
            ("Люблю планировать: цели, критерии успеха, шаги, сроки.", "LOG"),
            ("Быстро замечаю логические ошибки в рассуждениях.", "LOG"),
            ("Предпочитаю текстовые конспекты, тезисы, списки.", "LOG"),
            ("Легко работаю с абстрактными символами, формулами, схемами алгоритмов.", "LOG"),
            ("Люблю сравнивать альтернативы по критериям и делать вывод.", "LOG"),
            ("Могу объяснить идею строго и последовательно, без образных примеров.", "LOG"),
            ("Мне нравятся чёткие правила, регламенты и определения.", "LOG"),
            ("Склонен(а) к аналитике: разбиваю сложную задачу на подзадачи.", "LOG"),
        ]

        # 1) найти/создать тест
        test = Test.query.filter_by(slug="thinking").first()
        if not test:
            test = Test(
                slug="thinking",
                title="Тип мышления (по Резапкину)",
                short_desc="Определение преобладающего типа мышления.",
                long_desc="Три шкалы: наглядно-действенное (ACT), наглядно-образное (IMG), словесно-логическое (LOG).",
                duration_min=5,
                image="img/tests/thinking.png",
                confidential_student=False,
            )
            db.session.add(test)
            db.session.flush()
        else:
            # на всякий случай приведём заголовок к единому виду
            if test.title != "Тип мышления (по Резапкину)":
                test.title = "Тип мышления (по Резапкину)"

        # 2) удалить старые вопросы/опции
        old_qs = TestQuestion.query.filter_by(test_id=test.id).all()
        for q in old_qs:
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # 3) добавить вопросы
        for i, (text, code) in enumerate(ITEMS, start=1):
            q = TestQuestion(test_id=test.id, order=i, text=text, qtype="single")
            db.session.add(q)
            db.session.flush()
            # Да — +1 к соответствующей шкале; Нет — 0
            db.session.add(TestOption(question_id=q.id, order=1, text="Да",  value=f"{code}=1"))
            db.session.add(TestOption(question_id=q.id, order=2, text="Нет", value=""))

        db.session.commit()
        print(f"Импорт «Тип мышления (по Резапкину)» завершён: вопросов — {len(ITEMS)}")

    @app.cli.command("import-holland")
    def import_holland():
        """
        Импорт «Опросник Холланда (RIASEC)».
        Шкалы: R (Realistic), I (Investigative), A (Artistic), S (Social), E (Enterprising), C (Conventional).
        Ответы: «Да» (CODE=1) / «Нет» (0).
        """
        from models import Test, TestQuestion, TestOption

        ITEMS = [
            # ---------- R: Realistic (практические, техника, природа, ручной труд) ----------
            ("Мне нравится чинить бытовую технику и инструменты.", "R"),
            ("Люблю работать руками: пилить, сверлить, собирать конструкции.", "R"),
            ("Нравится ухаживать за растениями или работать на улице.", "R"),
            ("Интересно управлять механизмами, станками или роботами.", "R"),
            ("Получаю удовольствие от прикладных физических задач.", "R"),
            ("Люблю разбирать устройства, чтобы понять, как они устроены.", "R"),
            ("Предпочитаю задания с видимым результатом, который можно потрогать.", "R"),
            ("Нравятся монтаж, электрика или слесарные работы.", "R"),

            # ---------- I: Investigative (исследования, наука, аналитика) ----------
            ("Люблю решать сложные головоломки и нестандартные задачи.", "I"),
            ("Интересуюсь наукой: читаю о физике, биологии или химии.", "I"),
            ("Нравятся лабораторные эксперименты и исследования.", "I"),
            ("Получаю удовольствие от анализа данных, графиков, таблиц.", "I"),
            ("Люблю работать с алгоритмами и моделями.", "I"),
            ("Часто задаю вопросы «почему так происходит?» и ищу объяснения.", "I"),
            ("Могу подолгу разбираться в справочниках и научпопе.", "I"),
            ("Предпочитаю задачи, требующие внимательного анализа и логики.", "I"),

            # ---------- A: Artistic (творчество, дизайн, текст, музыка) ----------
            ("Люблю рисовать и создавать иллюстрации.", "A"),
            ("Интересен графический дизайн, шрифты, айдентика.", "A"),
            ("Нравится писать тексты, рассказы или стихи.", "A"),
            ("Люблю музыку: играть, петь или писать треки.", "A"),
            ("Интересуюсь театром, актёрской игрой, сценарием.", "A"),
            ("Нравится снимать фото/видео и делать монтаж.", "A"),
            ("Люблю придумывать оригинальные идеи и образы.", "A"),
            ("Предпочитаю свободные творческие задания без строгих правил.", "A"),

            # ---------- S: Social (помощь людям, обучение, взаимодействие) ----------
            ("Люблю помогать людям и объяснять материал другим.", "S"),
            ("С удовольствием наставляю младших или одноклассников.", "S"),
            ("Получаю энергию от командной работы и общения.", "S"),
            ("Умею выслушать и поддержать человека.", "S"),
            ("Нравится организовывать мероприятия для одноклассников.", "S"),
            ("Интересуюсь психологией и обучением.", "S"),
            ("Хотел(а) бы участвовать в образовательных или социальных проектах.", "S"),
            ("Легко сглаживаю конфликты и помогаю договориться.", "S"),

            # ---------- E: Enterprising (лидерство, бизнес, влияние) ----------
            ("Люблю влиять на других и убеждать.", "E"),
            ("Интересует предпринимательство и запуск проектов.", "E"),
            ("Нравится проводить презентации и выступать.", "E"),
            ("Люблю брать на себя ответственность и руководить.", "E"),
            ("Интересны маркетинг, продажи и переговоры.", "E"),
            ("Получаю удовольствие от соревнования и лидирования.", "E"),
            ("Нравится искать возможности и договариваться о партнёрствах.", "E"),
            ("Предпочитаю задачи с риском и высокой отдачей.", "E"),

            # ---------- C: Conventional (порядок, учёт, офисные процессы) ----------
            ("Люблю порядок в документах и файлах.", "C"),
            ("Нравится работать с таблицами, списками и базами данных.", "C"),
            ("Следую инструкциям и установленным правилам.", "C"),
            ("Внимателен(а) к деталям и аккуратен(а) в оформлении.", "C"),
            ("Интересна бухгалтерия, учёт и отчётность.", "C"),
            ("Предпочитаю чётко структурированные задания.", "C"),
            ("Легко заполняю формы и веду записи.", "C"),
            ("Нравится упорядочивать информацию и архивировать материалы.", "C"),
        ]

        # 1) найти/создать тест
        test = Test.query.filter_by(slug="holland").first()
        if not test:
            test = Test(
                slug="holland",
                title="Опросник Холланда (RIASEC)",
                short_desc="Исследуй тип личности и получи рекомендации по профессиям.",
                long_desc="6 направлений интересов: R, I, A, S, E, C. Ответы «Да/Нет». Итог — ведущие коды и их сочетание.",
                duration_min=6,
                image="img/tests/holland.png",
                confidential_student=False,
            )
            db.session.add(test)
            db.session.flush()
        else:
            # опционально приведём название к единому виду
            if test.title != "Опросник Холланда (RIASEC)":
                test.title = "Опросник Холланда (RIASEC)"

        # 2) удалить старые вопросы/опции
        old_qs = TestQuestion.query.filter_by(test_id=test.id).all()
        for q in old_qs:
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # 3) добавить новые
        for i, (text, code) in enumerate(ITEMS, start=1):
            q = TestQuestion(test_id=test.id, order=i, text=text, qtype="single")
            db.session.add(q)
            db.session.flush()
            # «Да» — +1 к соответствующей шкале; «Нет» — 0
            db.session.add(TestOption(question_id=q.id, order=1, text="Да",  value=f"{code}=1"))
            db.session.add(TestOption(question_id=q.id, order=2, text="Нет", value=""))

        db.session.commit()
        print(f"Импорт «Опросник Холланда (RIASEC)» завершён: вопросов — {len(ITEMS)}")

    @app.cli.command("import-cdi")
    def import_cdi():
        """
        Опросник детской депрессии (скрининг, CDI-style).
        27 утверждений, ответы: «Нет»=0, «Иногда»=1, «Часто»=2 (TOTAL).
        НЕ является официальным CDI и не воспроизводит лицензионные формулировки.
        Результаты видит психолог; учащемуся показывается общая сводка.
        """
        from models import Test, TestQuestion, TestOption

        ITEMS = [
            # 27 оригинально сформулированных утверждений под скрининг
            "В последнее время я часто чувствую грусть.",
            "Мне трудно получать удовольствие от того, что раньше нравилось.",
            "Я быстро устаю, даже если особо ничего не делал(а).",
            "Меня часто раздражают мелочи.",
            "Мне тяжело сосредоточиться на уроках или чтении.",
            "Мне сложно принимать даже небольшие решения.",
            "Часто чувствую себя виноватым(ой) без особой причины.",
            "Я думаю о себе хуже, чем раньше.",
            "Кажется, что другим без меня лучше.",
            "Мне меньше хочется общаться с друзьями.",
            "Мне трудно заснуть или сон беспокойный.",
            "Просыпаюсь слишком рано и не могу заснуть снова.",
            "Аппетит стал меньше, чем обычно.",
            "Аппетит стал больше, чем обычно.",
            "Часто кажется, что ничего не получится.",
            "Движения стали более медленными или, наоборот, я суетлив(а).",
            "Меня часто тревожат разные мысли.",
            "Я стал(а) более плаксивым(ой), чем раньше.",
            "Часто думаю, что будущее будет плохим.",
            "Мне сложнее выполнять домашние задания, чем раньше.",
            "Перестал(а) делать любимые занятия или кружки.",
            "Часто болит голова, живот или другое — без понятной причины.",
            "Часто чувствую себя одиноким(ой), даже когда рядом люди.",
            "Кажется, что меня никто не понимает.",
            "Иногда появляются тревожные мысли о причинении себе вреда.",
            "Появляются мысли, что меня бы не хватились, если бы меня не было.",
            "Даже хорошие события редко поднимают мне настроение.",
        ]

        # 1) найти/создать тест
        test = Test.query.filter_by(slug="cdi").first()
        if not test:
            test = Test(
                slug="cdi",
                title="CDI",
                short_desc="Определение уровня CDI у 7–17 лет.",
                long_desc=(
                    "Неофициальная адаптация под формат CDI: 27 утверждений, ответы «Нет/Иногда/Часто». "
                    "Сумма баллов используется только для скрининга и планирования поддержки. "
                    "Не является диагнозом; результаты видны школьному психологу."
                ),
                duration_min=7,
                image="img/tests/cdi.png",
                confidential_student=True,
            )
            db.session.add(test)
            db.session.flush()
        else:
            # При желании можем синхронизировать поля
            test.title = "CDI"
            test.confidential_student = True
            if not getattr(test, "duration_min", None):
                test.duration_min = 7

        # 2) удалить старые вопросы/опции
        old_qs = TestQuestion.query.filter_by(test_id=test.id).all()
        for q in old_qs:
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # 3) добавить новые
        for i, text in enumerate(ITEMS, start=1):
            q = TestQuestion(test_id=test.id, order=i, text=text, qtype="single")
            db.session.add(q)
            db.session.flush()
            # шкалирование TOTAL: Нет=0, Иногда=1, Часто=2
            db.session.add(TestOption(question_id=q.id, order=1, text="Нет",     value="TOTAL=0"))
            db.session.add(TestOption(question_id=q.id, order=2, text="Иногда",  value="TOTAL=1"))
            db.session.add(TestOption(question_id=q.id, order=3, text="Часто",   value="TOTAL=2"))

        db.session.commit()
        print(f"Импорт CDI-скрининга завершён: вопросов — {len(ITEMS)}")

    @app.cli.command("import-bennett")
    def import_bennett():
        """
        Тест Беннета (адаптированный набор задач без копирования оригинала).
        24 вопросы, по одному правильному ответу. Оценка: TOTAL (правильные ответы).
        """
        from models import Test, TestQuestion, TestOption

        # (вопрос, [(вариант, is_correct), ...])
        ITEMS = [
            # 1–6. Рычаги, блоки, наклонные плоскости, трение
            ("Если удлинить плечо рычага при той же силе, то груз...", [
                ("Можно поднять более тяжёлый", True),
                ("Поднимется только быстрее, но не тяжелее", False),
                ("Ничего не изменится", False),
            ]),
            ("Два шкива: один неподвижный (фиксированный). Что даёт один подвижный блок?", [
                ("Силу примерно вдвое меньше при большей длине верёвки", True),
                ("Силу вдвое больше, верёвки тратится меньше", False),
                ("Только меняет направление тяги", False),
            ]),
            ("Чем длиннее наклонная плоскость при той же высоте, тем требуемая сила по поверхности...", [
                ("Меньше", True),
                ("Больше", False),
                ("Не меняется", False),
            ]),
            ("Если смазать трущиеся детали, температура при работе обычно...", [
                ("Понизится", True),
                ("Повысится", False),
                ("Не изменится", False),
            ]),
            ("Один неподвижный блок (без подвижного) при подъёме груза...", [
                ("Меняет направление силы, но почти не меняет её величину", True),
                ("Вдвое уменьшает силу", False),
                ("Вдвое увеличивает силу", False),
            ]),
            ("Чтобы открутить тугую гайку, ключ подлиннее нужен потому, что момент...", [
                ("Больше — ту же силу прикладывать легче", True),
                ("Меньше — зато удобнее держать", False),
                ("Не зависит от длины ключа", False),
            ]),

            # 7–12. Электрические цепи, устойчивость, давление, плавание
            ("В последовательной цепи перегорела одна лампа. Остальные...", [
                ("Погаснут", True),
                ("Будут гореть ярче", False),
                ("Будут гореть как прежде", False),
            ]),
            ("В параллельной цепи выкрутили одну лампу. Остальные...", [
                ("Будут гореть как прежде", True),
                ("Погаснут", False),
                ("Загорятся ярче", False),
            ]),
            ("Шире база опоры и ниже центр тяжести — предмет станет...", [
                ("Устойчивее", True),
                ("Менее устойчивым", False),
                ("Без изменений", False),
            ]),
            ("Предмет с плотностью меньше плотности воды в воде...", [
                ("Всплывёт и будет держаться на поверхности", True),
                ("Утонет", False),
                ("Сначала утонет, потом всплывёт", False),
            ]),
            ("Ту же силу приложили к меньшей площади опоры. Давление...", [
                ("Вырастет", True),
                ("Уменьшится", False),
                ("Не изменится", False),
            ]),
            ("Груз добавили в лодку. Уровень погружения лодки...", [
                ("Увеличится: лодка вытеснит больше воды", True),
                ("Уменьшится", False),
                ("Останется прежним", False),
            ]),

            # 13–16. Зубчатые передачи, передачи движения, температурные эффекты
            ("Шестерня A (ведущая, 10 зубьев) крутит шестерню B (20 зубьев). Скорость вращения B будет...", [
                ("Вдвое меньше скорости A", True),
                ("Вдвое больше скорости A", False),
                ("Такой же", False),
            ]),
            ("Если шестерня A вращается по часовой стрелке, то соседняя шестерня B будет вращаться...", [
                ("Против часовой стрелки", True),
                ("По часовой стрелке", False),
                ("Не вращаться", False),
            ]),
            ("Две одинаковые пружины держат груз параллельно (каждая за свой конец). Суммарная допустимая нагрузка...", [
                ("Будет примерно вдвое больше", True),
                ("Останется прежней", False),
                ("Станет меньше", False),
            ]),
            ("При нагреве металлический стержень по длине обычно...", [
                ("Увеличивается", True),
                ("Уменьшается", False),
                ("Не меняется", False),
            ]),

            # 17–20. Движение, торможение, винты/резьба, тележка-«тачка»
            ("Если скорость автомобиля увеличить в 2 раза, тормозной путь на сухом покрытии (прочие равны) станет...", [
                ("Примерно в 4 раза больше", True),
                ("Примерно в 2 раза больше", False),
                ("Таким же", False),
            ]),
            ("У винта шаг резьбы больше. Чтобы вкрутить на ту же глубину, оборотов потребуется...", [
                ("Меньше", True),
                ("Больше", False),
                ("Столько же", False),
            ]),
            ("Чтобы везти тачку легче, груз лучше...", [
                ("Сместить ближе к колесу (оси)", True),
                ("Сместить к ручкам", False),
                ("Расположить по центру корыта", False),
            ]),
            ("Два одинаковых колеса соединили ремнём. Если ведущему увеличить диаметр шкива, ведомое при той же угловой скорости ведущего будет...", [
                ("Вращаться быстрее", True),
                ("Вращаться медленнее", False),
                ("Вращаться так же", False),
            ]),

            # 21–24. Газы, плавление льда, гидравлика, весы
            ("При уменьшении объёма замкнутого газа без теплообмена давление (в целом)...", [
                ("Увеличится", True),
                ("Уменьшится", False),
                ("Не изменится", False),
            ]),
            ("Лёд плавает в стакане воды. Когда лёд полностью растает, уровень воды...", [
                ("Останется примерно прежним", True),
                ("Поднимется", False),
                ("Опустится", False),
            ]),
            ("В гидропрессе маленький поршень давит на большой. Сила на большом поршне по сравнению с малым...", [
                ("Больше (во столько раз, во сколько площадь больше)", True),
                ("Такая же", False),
                ("Меньше", False),
            ]),
            ("На чашечных весах левая чаша перевешивает. Чтобы уравновесить без добавления/убавления грузов, можно...", [
                ("Сдвинуть левый груз ближе к оси", True),
                ("Сдвинуть левый груз дальше от оси", False),
                ("Сдвинуть правый груз ближе к оси", False),
            ]),
        ]

        # 1) найти/создать тест
        test = Test.query.filter_by(slug="bennett").first()
        if not test:
            test = Test(
                slug="bennett",
                title="Тест Беннета",
                short_desc="Пространственно-техническая сообразительность и механические представления.",
                long_desc=(
                    "Адаптированный набор задач на рычаги, блоки, передачи, устойчивость, давление и т.п. "
                    "Ответ с одним выбором. Итог — процент правильных и уровень (низкий/средний/высокий)."
                ),
                duration_min=6,
                image="img/tests/bennett.png",
                confidential_student=False,
            )
            db.session.add(test)
            db.session.flush()
        else:
            if test.title != "Тест Беннета":
                test.title = "Тест Беннета"

        # 2) удалить старые вопросы/опции
        old_qs = TestQuestion.query.filter_by(test_id=test.id).all()
        for q in old_qs:
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # 3) добавить новые вопросы/варианты
        for i, (qtext, opts) in enumerate(ITEMS, start=1):
            q = TestQuestion(test_id=test.id, order=i, text=qtext, qtype="single")
            db.session.add(q)
            db.session.flush()
            for j, (otext, is_ok) in enumerate(opts, start=1):
                db.session.add(TestOption(
                    question_id=q.id,
                    order=j,
                    text=otext,
                    value="TOTAL=1" if is_ok else "TOTAL=0"
                ))
        db.session.commit()

        print(f"Импорт «Тест Беннета» завершён: вопросов — {len(ITEMS)}")

    @app.cli.command("import-child-type")
    def import_child_type():
        """
        Импорт теста «Тип личности ребёнка (школьный возраст)».
        Шкалы: EMO, SOC, AUT, RESP, CRE. Ответы: «Да» (CODE=1) / «Нет» (0).
        """
        from models import Test, TestQuestion, TestOption

        ITEMS = [
            # -------- EMO: эмоциональная саморегуляция --------
            ("После неудачи я быстро успокаиваюсь и пробую ещё раз.", "EMO"),
            ("Критика помогает мне понять, что улучшить.", "EMO"),
            ("В спорной ситуации стараюсь говорить спокойно.", "EMO"),
            ("Когда волнуюсь, умею собраться и продолжать дело.", "EMO"),
            ("Редко «завожусь» из-за мелочей.", "EMO"),
            ("Могу переключиться с сильных эмоций на работу/учёбу.", "EMO"),

            # -------- SOC: социальность/коммуникабельность --------
            ("Легко знакомлюсь с новыми одноклассниками.", "SOC"),
            ("Люблю работать в группе и обсуждать идеи.", "SOC"),
            ("Часто помогаю одноклассникам разобраться в теме.", "SOC"),
            ("Могу мирно уладить спор между ребятами.", "SOC"),
            ("Не боюсь выступать перед классом.", "SOC"),
            ("Охотно задаю вопросы и поддерживаю диалог.", "SOC"),

            # -------- AUT: самостоятельность --------
            ("Могу спланировать, что и когда делать по урокам.", "AUT"),
            ("Начинаю задания без напоминаний.", "AUT"),
            ("Сам(а) ищу недостающую информацию в книгах/онлайн.", "AUT"),
            ("Если задание сложное, разбиваю его на шаги.", "AUT"),
            ("Могу работать без постоянного контроля взрослого.", "AUT"),
            ("Предлагаю свои темы/идеи для проекта.", "AUT"),

            # -------- RESP: ответственность/организованность --------
            ("Стараюсь сдавать работы в срок.", "RESP"),
            ("Держу в порядке тетради, папки и материалы.", "RESP"),
            ("Редко забываю нужные вещи на уроки.", "RESP"),
            ("Следую правилам класса и школьного распорядка.", "RESP"),
            ("Проверяю работу перед сдачей.", "RESP"),
            ("Если пообещал(а), стараюсь выполнить.", "RESP"),

            # -------- CRE: креативность/воображение --------
            ("Люблю придумывать необычные идеи и решения.", "CRE"),
            ("Нравится рисовать/эскизировать, чтобы объяснить мысль.", "CRE"),
            ("В свободных заданиях предлагаю свой вариант оформления.", "CRE"),
            ("Часто соединяю идеи из разных предметов.", "CRE"),
            ("Люблю экспериментировать: «а что если сделать иначе?»", "CRE"),
            ("Могу придумать несколько способов решить задачу.", "CRE"),
        ]

        # 1) найти/создать тест
        test = Test.query.filter_by(slug="child_type").first()
        if not test:
            test = Test(
                slug="child_type",
                title="Тип личности ребёнка (школьный возраст)",
                short_desc="Особенности школьника: эмоции, общение, самостоятельность, ответственность, креативность.",
                long_desc=("Пять шкал: EMO (эмоциональная саморегуляция), SOC (социальность), "
                           "AUT (самостоятельность), RESP (ответственность), CRE (креативность). "
                           "Ответы «Да/Нет», итог — ведущие стороны и ориентиры развития."),
                duration_min=5,
                image="img/tests/child.png",
                confidential_student=False,
            )
            db.session.add(test)
            db.session.flush()
        else:
            # актуализируем заголовок
            if test.title != "Тип личности ребёнка (школьный возраст)":
                test.title = "Тип личности ребёнка (школьный возраст)"
            test.confidential_student = False

        # 2) удалить старые вопросы/опции
        old_qs = TestQuestion.query.filter_by(test_id=test.id).all()
        for q in old_qs:
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # 3) добавить вопросы
        for i, (text, code) in enumerate(ITEMS, start=1):
            q = TestQuestion(test_id=test.id, order=i, text=text, qtype="single")
            db.session.add(q)
            db.session.flush()
            # «Да» — +1 к шкале; «Нет» — 0
            db.session.add(TestOption(question_id=q.id, order=1, text="Да",  value=f"{code}=1"))
            db.session.add(TestOption(question_id=q.id, order=2, text="Нет", value=""))

        db.session.commit()
        print(f"Импорт «Тип личности ребёнка (школьный возраст)» завершён: вопросов — {len(ITEMS)}")


    @app.cli.command("backfill-descriptions")
    @app.cli.command("backfill_descriptions")
    def backfill_descriptions():
        """Заполняет подробные описания (long_desc) для тестов."""
        from models import Test

        texts = {
            "mbti": (
                "Короткая версия MBTI оценивает ваши предпочтения в четырёх дихотомиях: "
                "экстраверсия/интроверсия, ощущение/интуиция, мышление/чувство и суждение/восприятие. "
                "На основе ответов формируется четырёхбуквенный тип (например, INTJ или ESFP), который описывает "
                "привычные способы получать информацию, принимать решения и взаимодействовать с миром. "
                "Тест не ставит диагнозов — он помогает осознать природные предпочтения. "
                "Профиль полезен для выбора ролей в проекте, способов учёбы и коммуникации. "
                "Зная свой тип и типы других, проще предотвращать конфликты и договариваться. "
                "В отчёте вы получите сильные стороны, зоны роста и советы по подготовке к экзаменам."
            ),
            "klimов": (
                "Опросник Е.А. Климова показывает склонность к типам профессий: человек-человек, человек-техника, "
                "человек-природа, человек-знаковая система и человек-художественный образ. "
                "Методика помогает понять, с какими объектами вам комфортнее работать. "
                "Полезна при выборе профиля, элективов и внеурочной активности. "
                "В отчёте — ведущий тип и близкие по интересам направления. "
                "Мы подскажем примеры факультетов и стартовых ролей, где эти склонности востребованы. "
                "Результат — база для осознанного выбора учебной траектории."
            ),
            "kos2": (
                "КОС-2 измеряет коммуникативные и организаторские склонности. "
                "Коммуникативная часть — про лёгкость установления контактов и ведения диалога. "
                "Организаторская — про готовность брать ответственность и координировать процесс. "
                "Понимание профиля помогает выбирать роль в команде (инициатор, координатор, исполнитель). "
                "В отчёте — уровни по обеим шкалам и рекомендации по развитию. "
                "Используйте их в учебных проектах и при подготовке к поступлению."
            ),
            "interests": (
                "«Карта интересов» помогает выявить сферы деятельности, которые действительно откликаются. "
                "Вопросы отделяют устойчивые предпочтения от ситуативных симпатий. "
                "В результате — топ-сферы и связанные примеры профессий/курсов. "
                "Это полезно при выборе элективов, кружков и олимпиад. "
                "Мы также подскажем предметы, усиливающие ваши сильные стороны. "
                "Это первый шаг к осознанному выбору вуза и специальности."
            ),
            "thinking": (
                "Тест на тип мышления выявляет преобладающие способы решения задач: наглядно-образные, "
                "абстрактно-логические, практико-ориентированные и др. "
                "Понимание стиля помогает подобрать методы подготовки: схемы, карточки, кейсы или визуализация. "
                "В отчёте — сильные стороны, возможные трудности и конкретные советы для учёбы. "
                "Это позволяет оптимизировать подготовку к экзаменам и проектам. "
                "Результат полезен и при выборе профиля: направления по-разному нагружают виды мышления."
            ),
            "child_type": (
                "Методика оценивает особенности личности школьника: темперамент, стиль взаимодействия и самостоятельность. "
                "Помогает понять, какие условия обучения дадут лучший эффект. "
                "В результате — сильные стороны и рекомендации по мотивации, коммуникации и распределению нагрузки. "
                "Это снижает конфликты и повышает вовлечённость. "
                "Тест не ставит диагнозов и предназначен для образовательной навигации. "
                "При необходимости дополняется консультацией психолога."
            ),
            "bennett": (
                "Тест Беннета оценивает пространственное воображение, внимание к деталям и техническую сообразительность. "
                "Эти качества важны для инженерных, архитектурных и дизайнерских направлений. "
                "Задания проверяют распознавание закономерностей и мысленное вращение фигур. "
                "В отчёте — ваш уровень и рекомендации по развитию пространственного мышления. "
                "Мы подскажем учебные задачи и проекты, где вы раскроетесь лучше всего. "
                "Это поможет сделать более осознанный выбор профиля."
            ),
            "cdi": (
                "CDI — скрининговый опросник эмоционального состояния для детей 7–17 лет. "
                "Он помогает заметить признаки возможных трудностей, но не является диагнозом. "
                "Прохождение рекомендуется с последующей консультацией школьного психолога. "
                "Результаты видны только специалисту и используются для планирования поддержки. "
                "Психолог видит индикаторы и зоны риска и определяет дальнейшие шаги. "
                "В кабинете ученика фиксируются лишь факт прохождения и дата."
            ),
        }

        updated = 0
        for slug, text in texts.items():
            t = Test.query.filter_by(slug=slug).first()
            if t:
                t.long_desc = text
                updated += 1
        db.session.commit()
        print(f"Обновлено описаний: {updated}")

    @app.cli.command("import-mbti")
    def import_mbti():
        """
        Импорт MBTI Step I (93 A/B-вопроса) из CSV.
        Ожидаемый файл: instance/mbti_step1.csv (UTF-8, ; или ,)
        Колонки: order,qtext,a_text,a_letter,b_text,b_letter
        Где a_letter/b_letter ∈ {E,I,S,N,T,F,J,P}
        """
        import csv
        from pathlib import Path
        from models import Test, TestQuestion, TestOption

        csv_path = Path(app.instance_path) / "mbti_step1.csv"
        if not csv_path.exists():
            print(f"Файл {csv_path} не найден. Положи CSV в {csv_path}")
            return

        # создаём или берём тест mbti
        test = Test.query.filter_by(slug="mbti").first()
        if not test:
            test = Test(
                slug="mbti",
                title="MBTI (Step I)",
                short_desc="93 A/B-вопроса, четыре дихотомии.",
                long_desc="Оценка предпочтений по E–I, S–N, T–F, J–P.",
                duration_min=15,
                image="img/tests/mbti.png",
                confidential_student=False,
            )
            db.session.add(test)
            db.session.flush()
        else:
            # можно обновить название под Step I (необязательно)
            if test.title != "MBTI (Step I)":
                test.title = "MBTI (Step I)"

        # очистим прежние вопросы/опции
        for q in TestQuestion.query.filter_by(test_id=test.id).all():
            TestOption.query.filter_by(question_id=q.id).delete()
            db.session.delete(q)
        db.session.commit()

        # читаем CSV (автоопределение ; или ,)
        with csv_path.open("r", encoding="utf-8") as f:
            sample = f.read(4096)
            delim = ";" if sample.count(";") > sample.count(",") else ","
            f.seek(0)
            reader = csv.DictReader(f, delimiter=delim)
            created = 0
            for row in reader:
                order = int(row["order"])
                qtext = row["qtext"].strip()
                a_text = row["a_text"].strip()
                a_letter = row["a_letter"].strip().upper()
                b_text = row["b_text"].strip()
                b_letter = row["b_letter"].strip().upper()

                if a_letter not in "EISNTFJP" or b_letter not in "EISNTFJP":
                    raise ValueError(f"Неверная буква в строке {order}: {a_letter}/{b_letter}")

                # ВАЖНО: qtype="single", т.к. Enum позволяет single/multi/scale/bool
                q = TestQuestion(test_id=test.id, order=order, text=qtext, qtype="single")
                db.session.add(q)
                db.session.flush()
                db.session.add(TestOption(question_id=q.id, order=1, text=a_text, value=a_letter))
                db.session.add(TestOption(question_id=q.id, order=2, text=b_text, value=b_letter))
                created += 1

        db.session.commit()
        print(f"Импорт MBTI завершён. Загружено вопросов: {created}")

    @app.cli.command("fix-mbti-qtype")
    def fix_mbti_qtype():
        """
        Одноразово правит вопросы, записанные ранее как qtype='ab' -> 'single'.
        Используем raw SQL, чтобы не упереться в Enum-мэппинг.
        """
        from sqlalchemy import text
        from models import TestQuestion

        tbl = TestQuestion.__table__.name  # корректное имя таблицы из модели
        try:
            res = db.session.execute(text(f"UPDATE {tbl} SET qtype='single' WHERE qtype='ab'"))
            db.session.commit()
            print(f"Готово. Обновлено строк: {res.rowcount or 0}")
        except Exception as e:
            db.session.rollback()
            print(f"Не удалось обновить qtype: {e}")


def create_app():
    # Локальные импорты, чтобы функция была самодостаточной
    from flask import Flask, session, request, redirect, abort, url_for
    from dotenv import load_dotenv
    from config import Config
    from extensions import db, login_manager, babel  # babel: реальный или «заглушка» из extensions.py

    # get_locale может отсутствовать, если flask-babel не установлен
    try:
        from flask_babel import get_locale as _get_locale  # type: ignore
    except Exception:
        def _get_locale():
            # Фолбэк: возвращаем выбранный язык из сессии или дефолт
            return session.get("lang") or "ru"

    load_dotenv()

    app = Flask(__name__, static_folder="static", template_folder="templates")
    app.config.from_object(Config)

    # ---------- i18n: языки по умолчанию ----------
    app.config.setdefault("LANGUAGES", ["ru", "en", "kk"])
    app.config.setdefault("BABEL_DEFAULT_LOCALE", "ru")

    # ---------- Babel: селектор локали ----------
    def _select_locale():
        langs = app.config.get("LANGUAGES", ["ru", "en", "kk"])

        # 1) явный выбор пользователя из сессии
        lang = session.get("lang")
        if lang in langs:
            return lang

        # 2) язык из профиля пользователя (если поле есть)
        try:
            from flask_login import current_user
            if current_user.is_authenticated:
                u_lang = getattr(current_user, "locale", None)
                if u_lang in langs:
                    return u_lang
        except Exception:
            pass

        # 3) best-match из заголовков браузера
        return request.accept_languages.best_match(langs) or app.config.get("BABEL_DEFAULT_LOCALE", "ru")

    # Инициализация Babel (реальный или «заглушка» из extensions.py)
    try:
        babel.init_app(app, locale_selector=_select_locale)  # Flask-Babel >= 3
    except TypeError:
        babel.init_app(app)

    # ---------- Jinja: зарегистрировать функции перевода (_ / gettext / ngettext) ----------
    try:
        from flask_babel import gettext as _gettext, ngettext as _ngettext  # type: ignore
    except Exception:
        # Фолбэк без перевода — чтобы {{ _('...') }} не падал
        def _gettext(s: str, **kwargs):
            try:
                return s % kwargs if kwargs else s
            except Exception:
                return s

        def _ngettext(singular: str, plural: str, n: int, **kwargs):
            text = singular if int(n) == 1 else plural
            try:
                return text % kwargs if kwargs else text
            except Exception:
                return text

    app.jinja_env.globals.update(
        _=_gettext,
        gettext=_gettext,
        ngettext=_ngettext,
        get_locale=_get_locale,  # удобно вызывать прямо из шаблонов
    )

    # ---------- extensions ----------
    db.init_app(app)
    login_manager.init_app(app)
    login_manager.login_view = "auth.login"
    login_manager.login_message = "Пожалуйста, войдите для доступа."
    login_manager.login_message_category = "warning"

    # ---------- Blueprints ----------
    from blueprints.public  import bp as public_bp
    from blueprints.auth    import bp as auth_bp
    from blueprints.student import bp as student_bp
    from blueprints.tests   import bp as tests_bp  # регистрируем всегда

    # Опциональные модули
    try:
        from blueprints.psych import bp as psych_bp
    except Exception:
        psych_bp = None
    try:
        from blueprints.admin import bp as admin_bp
    except Exception:
        admin_bp = None

    app.register_blueprint(public_bp)                         # /
    app.register_blueprint(auth_bp,    url_prefix="/auth")
    app.register_blueprint(student_bp, url_prefix="/student")
    app.register_blueprint(tests_bp)                          # префикс задан внутри BP (/student/tests)
    if psych_bp:
        app.register_blueprint(psych_bp, url_prefix="/psych")
    if admin_bp:
        app.register_blueprint(admin_bp, url_prefix="/admin")

    # ---------- Переключение языка ----------
    @app.get("/set-lang/<lang>")
    def set_lang(lang: str):
        langs = app.config.get("LANGUAGES", ["ru", "en", "kk"])
        if lang not in langs:
            abort(404)
        session["lang"] = lang
        return redirect(request.referrer or url_for("public.index"))

    # ---------- Хелперы для шаблонов ----------
    @app.context_processor
    def utility_processor():
        from werkzeug.routing import BuildError
        from flask import url_for as _url_for

        def safe_url_for(endpoint, **values):
            try:
                return _url_for(endpoint, **values)
            except BuildError:
                return "#"

        def endpoint_exists(endpoint):
            try:
                _url_for(endpoint)
                return True
            except BuildError:
                return False

        # пары (код, короткая подпись) для переключателя языка
        lang_choices = [("ru", "Рус"), ("en", "Eng"), ("kk", "Qazaq")]

        return dict(
            safe_url_for=safe_url_for,
            endpoint_exists=endpoint_exists,
            site_name=app.config.get("SITE_NAME", "oi-orda"),
            LANG_CHOICES=lang_choices,
        )

    # ---------- Импорт моделей для Alembic ----------
    from models import (  # noqa: F401
        User, School, Subscription, Classroom,
        StudentProfile, PsychologistProfile, SchoolAdminProfile,
        Test, TestQuestion, TestOption, TestAttempt, TestAnswer,
    )

    # ---------- Миграции ----------
    from flask_migrate import Migrate
    Migrate(app, db)

    # ---------- CLI-команды ----------
    try:
        # если register_cli определена в этом же файле выше — просто вызовем
        register_cli(app)  # type: ignore[name-defined]
    except Exception:
        # если её нет — тихо пропустим
        pass
    from flask import Flask, session, request, redirect, url_for, abort
    from dotenv import load_dotenv
    from flask_migrate import Migrate

    from extensions import db, login_manager, babel
    from config import Config

    # ---------- CLI-команды ----------
    def register_cli(app):
        # оба имени команды будут работать
        @app.cli.command("seed-tests")
        @app.cli.command("seed_tests")
        def seed_tests():
            """Создаёт каталог тестов + по 3 демонстрационных вопроса (если их ещё нет)."""
            from models import Test, TestQuestion, TestOption  # импорт внутри команды

            data = [
                # slug,            title,                           short,                                               min, img,                          confidential_for_student
                ("holland", "Опросник Холланда", "Исследуй тип личности и получи рекомендации по профессиям.", 6,
                 "img/tests/holland.png", False),
                ("klimov", "ДДО (Климов)", "Тип профессий по классификации Е. А. Климова.", 5, "img/tests/klimov.png",
                 False),
                ("kos2", "КОС-2", "Коммуникативные и организаторские склонности.", 5, "img/tests/kos2.png", False),
                ("interests", "Карта интересов", "Предпочтительные виды деятельности.", 4, "img/tests/interests.png",
                 False),
                ("thinking", "Тип мышления", "Какой тип мышления у тебя преобладает.", 5, "img/tests/thinking.png",
                 False),
                ("child_type", "Тип личности ребёнка", "Особенности школьника.", 5, "img/tests/child.png", False),
                ("bennett", "Тест Беннета", "Пространственное воображение и технические способности.", 6,
                 "img/tests/bennett.png", False),
                ("mbti", "MBTI (укороченная версия)", "Склонности по типологии Майерс — Бриггс.", 7,
                 "img/tests/mbti.png", False),
                ("cdi", "Опросник детской депрессии (CDI)", "Определение уровня депрессивных симптомов у 7–17 лет.", 7,
                 "img/tests/cdi.png", True),
            ]

            created = 0
            for slug, title, short, mins, img, secret in data:
                t = Test.query.filter_by(slug=slug).first()
                if not t:
                    t = Test(
                        slug=slug,
                        title=title,
                        short_desc=short,
                        long_desc=short,  # подробный текст можно дозалить командой backfill-descriptions
                        duration_min=mins,
                        image=img,
                        confidential_student=secret,
                    )
                    db.session.add(t)
                    db.session.flush()

                    # по 3 демо-вопроса (одиночный выбор)
                    for i in range(1, 4):
                        q = TestQuestion(test_id=t.id, order=i, text=f"{title}: вопрос {i}", qtype="single")
                        db.session.add(q)
                        db.session.flush()
                        for j, txt in enumerate(["Совсем не про меня", "Похоже", "Очень про меня"], start=1):
                            db.session.add(TestOption(question_id=q.id, order=j, text=txt, value=str(j)))
                    created += 1

            db.session.commit()
            print(f"Готово. Создано тестов: {created}")

    def create_app():
        # Локальные импорты, чтобы функция была самодостаточной
        from flask import Flask, session, request, redirect, abort, url_for
        from dotenv import load_dotenv
        from config import Config
        from extensions import db, login_manager, babel  # babel: реальный или «заглушка» из extensions.py

        # get_locale может отсутствовать, если flask-babel не установлен
        try:
            from flask_babel import get_locale as _get_locale  # type: ignore
        except Exception:
            def _get_locale():
                # Фолбэк: возвращаем выбранный язык из сессии или дефолт
                return session.get("lang") or "ru"

        load_dotenv()

        app = Flask(__name__, static_folder="static", template_folder="templates")
        app.config.from_object(Config)

        # ---------- i18n: языки по умолчанию ----------
        app.config.setdefault("LANGUAGES", ["ru", "en", "kk"])
        app.config.setdefault("BABEL_DEFAULT_LOCALE", "ru")

        # ---------- Babel: селектор локали ----------
        def _select_locale():
            langs = app.config.get("LANGUAGES", ["ru", "en", "kk"])

            # 1) явный выбор пользователя из сессии
            lang = session.get("lang")
            if lang in langs:
                return lang

            # 2) язык из профиля пользователя (если поле есть)
            try:
                from flask_login import current_user
                if current_user.is_authenticated:
                    u_lang = getattr(current_user, "locale", None)
                    if u_lang in langs:
                        return u_lang
            except Exception:
                pass

            # 3) best-match из заголовков браузера
            return request.accept_languages.best_match(langs) or app.config.get("BABEL_DEFAULT_LOCALE", "ru")

        # Инициализация Babel (реальный или «заглушка» из extensions.py)
        try:
            babel.init_app(app, locale_selector=_select_locale)  # Flask-Babel >= 3
        except TypeError:
            babel.init_app(app)

        # ---------- Jinja: зарегистрировать функции перевода (_ / gettext / ngettext) ----------
        try:
            from flask_babel import gettext as _gettext, ngettext as _ngettext  # type: ignore
        except Exception:
            # Фолбэк без перевода — чтобы {{ _('...') }} не падал
            def _gettext(s: str, **kwargs):
                try:
                    return s % kwargs if kwargs else s
                except Exception:
                    return s

            def _ngettext(singular: str, plural: str, n: int, **kwargs):
                text = singular if int(n) == 1 else plural
                try:
                    return text % kwargs if kwargs else text
                except Exception:
                    return text

        app.jinja_env.globals.update(
            _=_gettext,
            gettext=_gettext,
            ngettext=_ngettext,
            get_locale=_get_locale,  # удобно вызывать прямо из шаблонов
        )

        # ---------- extensions ----------
        db.init_app(app)
        login_manager.init_app(app)
        login_manager.login_view = "auth.login"
        login_manager.login_message = "Пожалуйста, войдите для доступа."
        login_manager.login_message_category = "warning"

        # ---------- Blueprints ----------
        from blueprints.public import bp as public_bp
        from blueprints.auth import bp as auth_bp
        from blueprints.student import bp as student_bp
        from blueprints.tests import bp as tests_bp  # регистрируем всегда

        # Опциональные модули
        try:
            from blueprints.psych import bp as psych_bp
        except Exception:
            psych_bp = None

        try:
            from blueprints.admin import admin_bp
        except Exception:
            admin_bp = None

        app.register_blueprint(public_bp)  # /
        app.register_blueprint(auth_bp, url_prefix="/auth")
        app.register_blueprint(student_bp, url_prefix="/student")
        app.register_blueprint(tests_bp)  # префикс задан внутри BP (/student/tests)
        if psych_bp:
            app.register_blueprint(psych_bp, url_prefix="/psych")
        if admin_bp:
            app.register_blueprint(admin_bp)  # url_prefix уже задан в blueprint (/admin)

        # ---------- Переключение языка ----------
        @app.get("/set-lang/<lang>")
        def set_lang(lang: str):
            langs = app.config.get("LANGUAGES", ["ru", "en", "kk"])
            if lang not in langs:
                abort(404)
            session["lang"] = lang
            return redirect(request.referrer or url_for("public.index"))

        # ---------- Хелперы для шаблонов ----------
        @app.context_processor
        def utility_processor():
            from werkzeug.routing import BuildError
            from flask import url_for as _url_for

            def safe_url_for(endpoint, **values):
                try:
                    return _url_for(endpoint, **values)
                except BuildError:
                    return "#"

            def endpoint_exists(endpoint):
                try:
                    _url_for(endpoint)
                    return True
                except BuildError:
                    return False

            # пары (код, короткая подпись) для переключателя языка
            lang_choices = [("ru", "Рус"), ("en", "Eng"), ("kk", "Qazaq")]

            return dict(
                safe_url_for=safe_url_for,
                endpoint_exists=endpoint_exists,
                site_name=app.config.get("SITE_NAME", "oi-orda"),
                LANG_CHOICES=lang_choices,
            )

        # ---------- Импорт моделей для Alembic ----------
        from models import (  # noqa: F401
            User, School, Subscription, Classroom,
            StudentProfile, PsychologistProfile, SchoolAdminProfile,
            Test, TestQuestion, TestOption, TestAttempt, TestAnswer,
        )

        # ---------- Миграции ----------
        from flask_migrate import Migrate
        Migrate(app, db)

        # ---------- CLI-команды ----------
        try:
            # если register_cli определена в этом же файле выше — просто вызовем
            register_cli(app)  # type: ignore[name-defined]
        except Exception:
            # если её нет — тихо пропустим
            pass

        return app
    return app


